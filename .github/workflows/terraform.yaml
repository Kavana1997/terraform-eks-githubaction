name: Deploy EKS with Terraform

on:
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    # Create S3 backend if it doesn't exist
    - name: Setup Terraform Backend
      run: |
        # Check if S3 bucket exists
        if ! aws s3api head-bucket --bucket terraform-eks-state-bucket 2>/dev/null; then
          echo "Creating S3 bucket for Terraform state..."
          aws s3api create-bucket \
            --bucket terraform-eks-state-bucket \
            --region ${{ secrets.AWS_REGION }} \
            $([ "${{ secrets.AWS_REGION }}" != "us-east-1" ] && echo "--create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}")
          
          echo "Enabling versioning on S3 bucket..."
          aws s3api put-bucket-versioning \
            --bucket terraform-eks-state-bucket \
            --versioning-configuration Status=Enabled
          
          echo "Enabling encryption on S3 bucket..."
          aws s3api put-bucket-encryption \
            --bucket terraform-eks-state-bucket \
            --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
        else
          echo "S3 bucket already exists"
        fi
        
        # Check if DynamoDB table exists
        if ! aws dynamodb describe-table --table-name terraform-state-lock 2>/dev/null; then
          echo "Creating DynamoDB table for state locking..."
          aws dynamodb create-table \
            --table-name terraform-state-lock \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ secrets.AWS_REGION }}
        else
          echo "DynamoDB table already exists"
        fi
        
        # Update backend configuration with correct region
        sed -i 's/region = "us-east-1"/region = "${{ secrets.AWS_REGION }}"/g' main.tf

    # Check for VPC limits
    - name: Check VPC Limits
      run: |
        VPC_COUNT=$(aws ec2 describe-vpcs --query 'length(Vpcs)' --output text)
        echo "Current VPC count: $VPC_COUNT"
        
        if [ "$VPC_COUNT" -ge 5 ]; then
          echo "‚ö†Ô∏è WARNING: You're approaching the VPC limit (5). Consider cleaning up unused VPCs."
          aws ec2 describe-vpcs --query 'Vpcs[].{VpcId:VpcId,Name:Tags[?Key==`Name`].Value|[0],CIDR:CidrBlock}' --output table
        fi
    
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      
    - name: Terraform Init
      id: init
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
        
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
    - name: Get Kubeconfig
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        aws eks update-kubeconfig --name $(terraform output -raw cluster_name) --region $(terraform output -raw region)
        kubectl get nodes
